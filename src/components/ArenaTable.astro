---
interface Props {}

const {} = Astro.props;
---

<script is:inline>
    document.addEventListener("DOMContentLoaded", async () => {
        const tables = document.querySelectorAll(
            ".cratesio-sorted-table table",
        );
        for (const table of tables) {
            const body = table.querySelector("tbody");
            const rows = body.querySelectorAll("tr");
            let new_rows = await Promise.all(
                Array.from(rows).map((row) => {
                    const crate = row.querySelector(".crate");
                    if (crate == null) {
                        return Promise.resolve([0, row, "", "0.0.0"]);
                    }

                    let name = new URL(crate).pathname.split("/").pop();
                    return (async () => {
                        const resp = await fetch(
                            `https://crates.io/api/v1/crates/${name}`,
                        );
                        const data = await resp.json();

                        const updated = new Date(
                            data["versions"][0]["created_at"],
                        );
                        return [
                            data["crate"]["downloads"],
                            row,
                            `${updated.toLocaleString("default", { month: "long" })} ${updated.getFullYear()}`,
                            data["versions"][0]["num"],
                        ];
                    })();
                }),
            );

            new_rows.sort((a, b) => a[0] < b[0]);

            for (const row of new_rows) {
                const children = row[1].children;
                children[children.length - 3].innerText = row[0];
                children[children.length - 2].innerText = row[2];
                children[children.length - 1].innerText = row[3];
            }

            body.replaceChildren(...new_rows.map((i) => i[1]));
        }
    });
</script>

<div class="cratesio-sorted-table fullwidth">
    <slot />
</div>

<style lang="scss" is:global>
    .fullwidth table {
        width: 100%;
        border-spacing: 0;
        table-layout: fixed;
        border-collapse: collapse;
        display: block;
        overflow-x: scroll;

        tbody tr:nth-child(odd) td {
            background-color: #ccc;
        }
        tbody tr:nth-child(even) td {
            background: #f5f5f5;
        }
        th {
            background: #f5f5f5;
        }

        th,
        td {
            min-width: fit-content;
            white-space: nowrap;
            padding: 0.5em 0.2em;
            border-left: 0.5px solid #ddd;
        }

        /* @media (width > 449px) { */
        tr td:first-child,
        th:first-child {
            position: sticky;
            left: 0;
            z-index: 2;
        }
        /* } */

        /* @media (width < 450px) { */
        /*     tr th:first-child { */
        /*         overflow: hidden; */
        /*     } */
        /**/
        /*     tr td:first-child, */
        /*     th:first-child { */
        /*         width: 0px !important; */
        /*         max-width: 0px !important; */
        /*         min-width: unset; */
        /*         padding: 0; */
        /*         border-left: 0; */
        /*     } */
        /**/
        /*     tr td { */
        /*         padding-top: 1.8em; */
        /*     } */
        /**/
        /*     tr td:first-child .crate, */
        /*     th:first-child .crate { */
        /*         position: sticky; */
        /*         left: 0; */
        /*         z-index: 2; */
        /*         display: block; */
        /*         width: fit-content; */
        /*         padding-top: 0; */
        /*         padding-bottom: 0; */
        /*         transform: translate(0em, -1em); */
        /*     } */
        /* } */
    }

    @media (width > 900px) {
        .fullwidth {
            width: 100%;
        }
        .fullwidth table {
            position: relative;
            left: calc(max(-100vw, -130em) + (min(100vw, 130em) * 0.5 + 15em));
            /* hack that interacts with grid's sizing to make tables
             * as wide as they can possibly be when the screen supports it 
             * The times 0.5 is to allow for the auto layout on *both sides*
            */
            width: calc(100vw - 6em);
        }
    }
</style>
